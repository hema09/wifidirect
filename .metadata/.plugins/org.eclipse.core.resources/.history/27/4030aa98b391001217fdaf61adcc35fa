// Copyright 2011 Google Inc. All Rights Reserved.

package com.example.android.wifidirect;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.URI;

import android.app.IntentService;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.provider.MediaStore;
import android.util.Log;

/**
 * A service that process each file transfer request i.e Intent by opening a
 * socket connection with the WiFi Direct Group Owner and writing the file
 */
public class FileTransferService extends IntentService {

	private static final int SOCKET_TIMEOUT = 5000;
	public static final String ACTION_SEND_FILE = "com.example.android.wifidirect.SEND_FILE";
	public static final String EXTRAS_FILE_PATH = "file_url";
	public static final String EXTRAS_GROUP_OWNER_ADDRESS = "go_host";
	public static final String EXTRAS_GROUP_OWNER_PORT = "go_port";
	public static final String EXTRAS_TRANSPORT = "0";

	public FileTransferService(String name) {
		super(name);
	}

	public FileTransferService() {
		super("FileTransferService");
	}

	/*
	 * (non-Javadoc)
	 * @see android.app.IntentService#onHandleIntent(android.content.Intent)
	 */
	@Override
	protected void onHandleIntent(Intent intent) {

		Context context = getApplicationContext();
		if (intent.getAction().equals(ACTION_SEND_FILE)) {
			String fileUri = intent.getExtras().getString(EXTRAS_FILE_PATH);
			String host = intent.getExtras().getString(EXTRAS_GROUP_OWNER_ADDRESS);
			int transport = intent.getExtras().getInt(EXTRAS_TRANSPORT);
			int port = intent.getExtras().getInt(EXTRAS_GROUP_OWNER_PORT);

			if(transport == 0) {
				//tcp file transfer
				
				Socket socket = new Socket();
				

				try {
					Log.d(WiFiDirectActivity.TAG, "Opening client socket - ");
					socket.bind(null);
					socket.connect((new InetSocketAddress(host, port)), SOCKET_TIMEOUT);

					Log.d(WiFiDirectActivity.TAG, "Client socket - " + socket.isConnected());
					OutputStream stream = socket.getOutputStream();
					ContentResolver cr = context.getContentResolver();
					InputStream is = null;
					try {
						is = cr.openInputStream(Uri.parse(fileUri));
					} catch (FileNotFoundException e) {
						Log.d(WiFiDirectActivity.TAG, e.toString());
					}
					DeviceDetailFragment.copyFile(is, stream);
					Log.d(WiFiDirectActivity.TAG, "Client: Data written");
				} catch (IOException e) {
					Log.e(WiFiDirectActivity.TAG, e.getMessage());
				} finally {
					if (socket != null) {
						if (socket.isConnected()) {
							try {
								socket.close();
							} catch (IOException e) {
								// Give up
								e.printStackTrace();
							}
						}
					}
				}
			} else {
				byte b[] = new byte[1024];
				//udp file transfer
				Log.d(WiFiDirectActivity.TAG, "Opening client socket UDP - ");
				byte sdata[] = new byte[1024];
				try {
				DatagramSocket dsoc = new DatagramSocket();
				InetAddress ip = InetAddress.getByName(host);
				ContentResolver cr = context.getContentResolver();
				/*FileInputStream inputStream = (FileInputStream) cr.openInputStream(Uri.parse(fileUri));
				
				int nRead = 0, i=0;
				while ((nRead = inputStream.read(sdata)) != -1) {
					Log.d(WiFiDirectActivity.TAG, String.valueOf(nRead) +  " " + String.valueOf(i++));
					
					dsoc.send(new DatagramPacket(sdata, sdata.length, ip, port));
					if (nRead == 0) {
						sdata = "END".getBytes();
						dsoc.send(new DatagramPacket(sdata, sdata.length, ip, port));
					}
				}*/
				String str = "Hi...";
				dsoc.send(new DatagramPacket(str.getBytes(), str.getBytes().length, ip, port));
				DatagramPacket dp = new DatagramPacket(b, b.length);
				dsoc.receive(dp);
				 Log.d(WiFiDirectActivity.TAG, String.valueOf(dp.getLength()) + " " + str);
                 //out_file.write(dp.getData());
				Log.d(WiFiDirectActivity.TAG, "File transfer done - ");
				} catch(Exception e) {
					e.printStackTrace();
				}
				
			}

		}
	}
	
	public String getRealPathFromURI(Uri contentUri) {
        String[] proj = { MediaStore.Images.Media.DATA };
        Cursor cursor = getContentResolver().query(contentUri, proj, null, null, null);
        int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
        cursor.moveToFirst();
        return cursor.getString(column_index);
    }
}
